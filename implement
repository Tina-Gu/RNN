#RNN
import torch
import torchvision
from torch import nn
import matplotlib.pyplot as plt
import torchvision.transforms as transforms


# Cifar-10 data
transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])
# Data
trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)
trainLoader = torch.utils.data.DataLoader(trainset, batch_size=8, shuffle=True, num_workers=2)
testLoader = torch.utils.data.DataLoader(testset, batch_size=8, shuffle=False, num_workers=2)
trainLoader = trainLoader[:5000]
testLoader = testLoader[:1000]
# Data classes
classes = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

input_size =32
hidden_size = 64
output_size=10
layer = 2
class rnn(nn.Module):
    def __int__(self,input_size,hidden_size,output_size,layer):
        super(rnn,self).__int__()
        self.lstm = nn.LSTM(input_size,hidden_size,layer,layer)
        self.full_connetion = nn.Linear(hidden_size, output_size)
        
    def forward(self,x):
        self.hidden_cell = (torch.zeros(1, len(x), hidden_size), torch.zeros(1, len(x), hidden_size))
        output, (_, _) = self.lstm(x, hidden_cell)
        output = self.full_connection(output[-1, :, :])
        return output
model = rnn()

        
        


        
